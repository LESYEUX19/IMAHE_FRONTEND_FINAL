@page "/settings"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Settings</PageTitle>

<div class="settings-page-wrapper">
    <div class="settings-container">
        <div class="header-section">
            <span class="oi oi-cog header-icon"></span>
            <div>
                <h1>Classification Settings</h1>
                <p class="lead">Fine-tune the AI's sensitivity to get the perfect sorting results for your photos.</p>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">@errorMessage</div>
        }

        @if (settingsModel == null)
        {
            <div class="text-center mt-5"><div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"></div><p class="mt-2"><em>Loading your settings...</em></p></div>
        }
        else
        {
            <div class="settings-card" style="margin-bottom: 2rem;">
                <div class="card-header"><span class="oi oi-image me-2"></span>Image Quality</div>
                <div class="card-body">
                    <div class="setting-item">
                        <div class="icon-wrapper"><span class="oi oi-moon"></span></div>
                        <div>
                            <label for="minExposure" class="form-label">Minimum Exposure</label>
                            <input id="minExposure" type="number" class="form-control" @bind="settingsModel.MinExposure" />
                            @* UPDATED: Changed 'Blurred' to 'Poor Quality' *@
                            <div class="form-text">Classifies photos as 'Poor Quality' if they are too dark. <strong>Recommended: 50</strong></div>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="icon-wrapper"><span class="oi oi-sun"></span></div>
                        <div>
                            <label for="maxExposure" class="form-label">Maximum Exposure</label>
                            <input id="maxExposure" type="number" class="form-control" @bind="settingsModel.MaxExposure" />
                            @* UPDATED: Changed 'Blurred' to 'Poor Quality' *@
                            <div class="form-text">Classifies photos as 'Poor Quality' if they are too bright. <strong>Recommended: 200</strong></div>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="icon-wrapper"><span class="oi oi-magnifying-glass"></span></div>
                        <div>
                            <label for="minSharpness" class="form-label">Minimum Sharpness</label>
                            <input id="minSharpness" type="number" class="form-control" @bind="settingsModel.MinSharpness" />
                            <div class="form-text">Classifies photos as 'Blurred' if the main subject isn't sharp enough. <strong>Recommended: 100</strong></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="settings-card summary-card">
                <div class="card-header"><span class="oi oi-task me-2"></span>Imahe's Sorting Guide</div>
                <div class="card-body summary-body">
                    <p>Based on your settings, here is Imahe's detailed strategy for sorting your photos:</p>
                    @GetSettingsSummary()
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-secondary me-auto" @onclick="ResetToDefault"><span class="oi oi-reload me-1"></span>Reset to Recommended</button>
                    <button class="btn btn-success" @onclick="SaveChanges" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Saving...</span>
                        }
                        else
                        {
                            <span class="oi oi-check"></span>
                            <span> Save Changes</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .settings-page-wrapper {
        padding: 2rem 3rem;
        background-color: #f8f9fa;
        min-height: 100%;
    }

    .settings-container {
        max-width: 900px;
        margin: auto;
    }

    .header-section {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
        gap: 1rem;
    }

    .header-icon {
        font-size: 2.5rem;
        color: #495057;
    }

    .settings-container h1 {
        margin-bottom: 0;
    }

    .settings-container .lead {
        color: #6c757d;
        margin-top: 0;
        margin-bottom: 2.5rem;
    }

    .settings-card {
        background-color: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        display: flex;
        flex-direction: column;
    }

    .card-header {
        font-weight: 600;
        font-size: 1.1rem;
        padding: 1rem 1.5rem;
        background-color: #fdfdff;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        align-items: center;
    }

    .card-body {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .card-footer {
        margin-top: auto;
        padding: 1rem 1.5rem;
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        display: flex;
        justify-content: flex-end;
    }

    .setting-item {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .icon-wrapper {
        flex-shrink: 0;
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e9ecef;
    }

        .icon-wrapper .oi {
            font-size: 1.25rem;
            color: #495057;
        }

    .setting-item > div {
        flex-grow: 1;
    }

    .setting-item .form-label {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .summary-card {
    }

    .summary-body p {
        margin-bottom: 0.5rem;
    }

    .summary-body ul {
        list-style-type: none;
        padding-left: 0;
        margin-bottom: 0;
    }

    .summary-body li {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 0.75rem 0;
    }

        .summary-body li:not(:last-child) {
            border-bottom: 1px solid #f0f0f0;
        }

    .summary-body .oi {
        font-size: 1.1rem;
        margin-top: 0.2rem;
    }
</style>

@code {
    private SettingsModel? settingsModel;
    private string? errorMessage;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        try
        {
            settingsModel = await Http.GetFromJsonAsync<SettingsModel>("http://localhost:8000/settings");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load settings: {ex.Message}";
        }
    }

    private async Task SaveChanges()
    {
        if (settingsModel == null) return;
        isSaving = true;
        errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:8000/settings", settingsModel);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Settings saved successfully!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to save settings: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ResetToDefault()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to reset all settings to their recommended defaults?");
        if (confirmed && settingsModel != null)
        {
            settingsModel = new SettingsModel
            {
                MinExposure = 50,
                MaxExposure = 200,
                MinSharpness = 100
            };
            await SaveChanges();
        }
    }

    private MarkupString GetSettingsSummary()
    {
        if (settingsModel == null) return new MarkupString("");

        var summary = new StringBuilder("<ul>");

        summary.Append($"<li><span class='oi oi-thumb-up text-success'></span><div>Imahe will classify a photo as <strong>'Good'</strong> if it passes all my quality checks and doesn't have any obvious issues.</div></li>");
        summary.Append($"<li><span class='oi oi-star text-primary'></span><div>Within the 'Good' photos, Imahe will highlight the absolute best as <strong>'Focused'</strong>. These have a very sharp subject that stands out from a blurred background, based on Imahe's built-in advanced analysis.</div></li>");

        // UPDATED: 'Blurred' description now only refers to sharpness.
        summary.Append($"<li><span class='oi oi-ban text-danger'></span><div>A photo will be classified as <strong>'Blurred'</strong> if it's out of focus (sharpness is below <strong>{settingsModel.MinSharpness:F0}</strong>).</div></li>");

        // ADDED: New entry for 'Poor Quality' based on exposure settings.
        summary.Append($"<li><span class='oi oi-thumb-down text-warning'></span><div>A photo will be classified as <strong>'Poor Quality'</strong> if it's too dark (exposure below <strong>{settingsModel.MinExposure:F0}</strong>) or too bright (exposure above <strong>{settingsModel.MaxExposure:F0}</strong>).</div></li>");

        summary.Append($"<li><span class='oi oi-eye text-warning'></span><div>For group photos, Imahe will use built-in closed-eye detection. If too many people have their eyes shut, I'll classify the photo as <strong>'Closed Eyes'</strong>.</div></li>");
        summary.Append($"<li><span class='oi oi-layers text-info'></span><div>Finally, Imahe will analyze all images to find visually similar shots and classify them as <strong>'Duplicates'</strong>, making it easy for you to pick the best one from a burst.</div></li>");

        summary.Append("</ul>");
        return new MarkupString(summary.ToString());
    }

    public class SettingsModel
    {
        [JsonPropertyName("min_exposure")] public float MinExposure { get; set; }
        [JsonPropertyName("max_exposure")] public float MaxExposure { get; set; }
        [JsonPropertyName("min_sharpness")] public float MinSharpness { get; set; }
    }
}