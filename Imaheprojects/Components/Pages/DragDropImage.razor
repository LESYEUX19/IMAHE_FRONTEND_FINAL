@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.IO
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="image-upload-main-layout">

    <!-- Left: Large Preview -->
    <div class="image-large-preview-panel">
        @if (imagePreviews.Count > 0)
        {
            <div class="image-large-preview-card">
                <img src="@imagePreviews[selectedIndex].ImageDataUrl" alt="@imagePreviews[selectedIndex].FileName" class="image-large-preview-img" />
                <div class="image-large-info">
                    <div class="file-name">@imagePreviews[selectedIndex].FileName</div>
                    <div class="file-size">@FormatFileSize(imagePreviews[selectedIndex].FileSize)</div>
                    @if (imagePreviews[selectedIndex].ClassificationResult != null)
                    {
                        <div class="classification-details">
                            <div class="details-summary @GetSummaryClass(imagePreviews[selectedIndex].ClassificationResult.Label)">
                                @imagePreviews[selectedIndex].ClassificationResult.GetDetailsSummary()
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="image-large-preview-placeholder">
                <span class="placeholder-icon">üñºÔ∏è</span>
                <div class="placeholder-text">No image selected</div>
            </div>
        }
    </div>

    <!-- Right: Processing Controls & Thumbnails -->
    <div class="image-upload-side-panel">
        <div class="image-upload-header">
            <h2 class="image-upload-title">Process Folder Images</h2>
            <p class="image-upload-desc">Select input and output folders to process and organize images. Supported formats: JPG, PNG, GIF, BMP, WEBP. Max 1GB per file.</p>
            <div class="folder-selection">
                <label>Input Folder:</label>
                <button @onclick="SelectInputFolder">Select Input Folder</button>
            </div>
            <div class="folder-selection">
                <label>Output Folder:</label>
                <button @onclick="SelectOutputFolder">Select Output Folder</button>
            </div>
            @if (!string.IsNullOrEmpty(outputFolderPath))
            {
                <p class="folder-info">Output subfolders will be created at:<br />@Path.Combine(outputFolderPath, "Good")<br />@Path.Combine(outputFolderPath, "Bad")<br />@Path.Combine(outputFolderPath, "Duplicate")<br />@Path.Combine(outputFolderPath, "Closed Eye")</p>
            }
            <button class="process-btn" @onclick="StartProcessing" disabled="@(string.IsNullOrEmpty(inputFolderPath) || string.IsNullOrEmpty(outputFolderPath) || isProcessingAny)">‚ñ∂ Start Processing</button>
            <div class="progress-bar">
                Processed: @processedCount / @totalFiles
                <progress value="@processedCount" max="@totalFiles"></progress>
            </div>
        </div>

        <!-- Move the warning message to the left of the thumbnails -->
        <div class="alert-container">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <div class="alert-content">
                        <div class="alert-icon">‚ö†Ô∏è</div>
                        <div class="alert-text">
                            <strong>Error:</strong> @errorMessage
                        </div>
                        <button @onclick="ClearError" class="alert-close" title="Dismiss">√ó</button>
                    </div>
                </div>
            }

            @if (showNotification)
            {
                <div class="alert alert-warning">
                    <div class="alert-content">
                        <div class="alert-icon">‚ö†Ô∏è</div>
                        <div class="alert-text">
                            <strong>Processing in progress!</strong> If you leave this page, the processing will be canceled.
                        </div>
                        <button @onclick="DismissNotification" class="alert-close" title="Dismiss">√ó</button>
                    </div>
                </div>
            }
        </div>

        <!-- Thumbnails with Scroll -->
        @if (imagePreviews.Count > 0)
        {
            <div class="thumbnail-scroll-box">
                <Virtualize Items="imagePreviews" Context="preview" OverscanCount="10">
                    <div class="image-thumbnail-card @(selectedIndex == imagePreviews.IndexOf(preview) ? "selected" : "") @(preview.HasError ? "error" : "")" @onclick="() => SelectPreview(imagePreviews.IndexOf(preview))">
                        <img src="@preview.ImageDataUrl" alt="@preview.FileName" class="image-thumbnail-img" />
                        @if (preview.IsProcessing)
                        {
                            <div class="processing-overlay">
                                <div class="processing-spinner"></div>
                                <span>Processing...</span>
                            </div>
                        }
                        @if (preview.HasError)
                        {
                            <div class="error-overlay">
                                <div class="error-icon">‚ö†Ô∏è</div>
                                <span>@preview.ErrorMessage</span>
                            </div>
                        }
                        @if (preview.ClassificationResult != null && !preview.HasError)
                        {
                            <div class="classification-badge @GetBadgeClass(preview.ClassificationResult.Label)">
                                @preview.ClassificationResult.Label
                            </div>
                        }
                    </div>
                </Virtualize>
            </div>
        }
    </div>
</div>

<style>
    .thumbnail-scroll-box {
        height: 300px; /* Set a fixed height for the scroll box */
        overflow-y: auto; /* Enable vertical scrolling */
        border: 1px solid #ccc; /* Optional: Add a border */
        padding: 10px; /* Optional: Add some padding */
    }

    .alert-container {
        margin-bottom: 10px; /* Add some space below the alerts */
        text-align: left; /* Align text to the left */
    }
</style>

@code {
    private string inputFolderPath = "";
    private string outputFolderPath = "";
    private List<ImagePreview> imagePreviews = new();
    private List<string> filePaths = new();
    private List<ClassificationResult> uploadResults = new();
    private string errorMessage = "";
    private bool isProcessingAny = false;
    private bool showNotification = false; // New variable for notification
    private int selectedIndex = 0;
    private int processedCount = 0;
    private int totalFiles = 0;
    private const long MaxFileSize = 1 * 1024 * 1024 * 1024; // 1GB limit
    private readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
    private readonly string[] ClassificationFolders = { "Good", "Bad", "Duplicate", "Closed Eye" }; // Updated to include new folders

    public class ImagePreview
    {
        public string ImageDataUrl { get; set; } = "";
        public ClassificationResult? ClassificationResult { get; set; }
        public bool IsProcessing { get; set; }
        public bool HasError { get; set; }
        public string FileName { get; set; } = "";
        public long FileSize { get; set; }
        public string ErrorMessage { get; set; } = "";
    }

    public class ClassificationResult
    {
        public string Status { get; set; } = "";
        public string Label { get; set; } = "";
        public JsonElement Details { get; set; }

        public string GetDetailsString()
        {
            if (Details.ValueKind == JsonValueKind.String)
            {
                return Details.GetString() ?? "";
            }
            else if (Details.ValueKind == JsonValueKind.Object)
            {
                try
                {
                    return JsonSerializer.Serialize(Details, new JsonSerializerOptions { WriteIndented = true });
                }
                catch
                {
                    return Details.ToString();
                }
            }
            return Details.ToString();
        }

        public string GetDetailsSummary()
        {
            if (Details.ValueKind == JsonValueKind.Object)
            {
                try
                {
                    switch (Label.ToLower())
                    {
                        case "bad":
                            var badSummary = "";
                            if (Details.TryGetProperty("reason", out var reason))
                            {
                                badSummary = reason.GetString() ?? "Low quality image";
                            }
                            if (Details.TryGetProperty("sharpness", out var sharpness) &&
                                Details.TryGetProperty("exposure", out var exposure))
                            {
                                if (!string.IsNullOrEmpty(badSummary))
                                    badSummary += $" (Sharpness: {sharpness.GetDouble():F1}, Exposure: {exposure.GetDouble():F1})";
                                else
                                    badSummary = $"Sharpness: {sharpness.GetDouble():F1}, Exposure: {exposure.GetDouble():F1}";
                            }
                            return string.IsNullOrEmpty(badSummary) ? "Low quality image" : badSummary;
                        case "good":
                            if (Details.TryGetProperty("sharpness", out var goodSharpness) &&
                                Details.TryGetProperty("exposure", out var goodExposure))
                                return $"‚úÖ Good quality (Sharpness: {goodSharpness.GetDouble():F1}, Exposure: {goodExposure.GetDouble():F1})";
                            return "‚úÖ Good quality image";
                        case "duplicate":
                            if (Details.TryGetProperty("message", out var message))
                                return $"üîÑ {message.GetString() ?? "Duplicate detected"}";
                            return "üîÑ Duplicate detected";
                        case "closed eye":
                            return "üëÅÔ∏è Closed eye detected";
                        default:
                            return "Image analyzed";
                    }
                }
                catch
                {
                    return "Image analyzed";
                }
            }
            return Details.ToString();
        }
    }

    private async Task SelectInputFolder()
    {
        try
        {
            var paths = await JSRuntime.InvokeAsync<string[]>("openFolderDialog");
            if (paths != null && paths.Length > 0)
            {
                inputFolderPath = Path.GetDirectoryName(paths[0]); // Get the directory from the first file
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting input folder: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SelectOutputFolder()
    {
        try
        {
            var paths = await JSRuntime.InvokeAsync<string[]>("openFolderDialog");
            if (paths != null && paths.Length > 0)
            {
                outputFolderPath = Path.GetDirectoryName(paths[0]); // Get the directory from the first file
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting output folder: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task StartProcessing()
    {
        if (string.IsNullOrWhiteSpace(inputFolderPath) || string.IsNullOrWhiteSpace(outputFolderPath))
        {
            errorMessage = "Please enter valid input and output folder paths.";
            StateHasChanged();
            return;
        }

        isProcessingAny = true;
        showNotification = true; // Show notification when processing starts
        processedCount = 0;
        imagePreviews.Clear();
        uploadResults.Clear();
        filePaths.Clear();
        StateHasChanged();

        try
        {
            // Validate input folder
            if (!Directory.Exists(inputFolderPath))
            {
                errorMessage = "Input folder does not exist.";
                isProcessingAny = false;
                showNotification = false; // Hide notification if there's an error
                StateHasChanged();
                return;
            }

            // Create output subfolders
            Directory.CreateDirectory(outputFolderPath);
            foreach (var folder in ClassificationFolders)
            {
                Directory.CreateDirectory(Path.Combine(outputFolderPath, folder));
            }

            // List image files in the input folder
            filePaths = Directory.GetFiles(inputFolderPath)
                .Where(f => AllowedExtensions.Contains(Path.GetExtension(f).ToLowerInvariant()))
                .ToList();
            totalFiles = filePaths.Count;
            if (totalFiles == 0)
            {
                errorMessage = "No valid images found in the input folder.";
                isProcessingAny = false;
                showNotification = false; // Hide notification if there's an error
                StateHasChanged();
                return;
            }

            // Process files one by one
            await ProcessFilesSequentially();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error accessing folders: {ex.Message}";
        }
        finally
        {
            isProcessingAny = false;
            showNotification = false; // Hide notification when processing is done
            StateHasChanged();
        }
    }

    private async Task ProcessFilesSequentially()
    {
        foreach (var filePath in filePaths)
        {
            var fileName = Path.GetFileName(filePath);
            var fileInfo = new FileInfo(filePath);

            // Skip files over 1GB silently
            if (fileInfo.Length > MaxFileSize)
            {
                processedCount++;
                StateHasChanged();
                continue;
            }

            var preview = new ImagePreview { FileName = fileName, FileSize = fileInfo.Length, IsProcessing = true };
            imagePreviews.Add(preview);
            StateHasChanged();

            try
            {
                // Send to backend with proper stream disposal
                ClassificationResult result;
                using (var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    var content = new MultipartFormDataContent();
                    var fileContent = new StreamContent(stream);
                    var extension = Path.GetExtension(fileName).TrimStart('.').ToLower();
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue($"image/{extension}");
                    content.Add(fileContent, "file", fileName);
                    var response = await Http.PostAsync("http://localhost:8000/upload-image/", content);
                    result = response.IsSuccessStatusCode
                        ? await response.Content.ReadFromJsonAsync<ClassificationResult>()
                        : new ClassificationResult
                        {
                            Label = "Error",
                            Details = JsonSerializer.SerializeToElement($"Upload failed: {response.StatusCode}")
                        };
                    preview.ClassificationResult = result ?? new ClassificationResult
                    {
                        Label = "Error",
                        Details = JsonSerializer.SerializeToElement("Invalid response")
                    };
                }

                // Fetch preview from backend
                preview.ImageDataUrl = $"http://localhost:8000/static/images/{Uri.EscapeDataString(fileName)}";

                // Move file to appropriate subfolder with retry logic
                if (!preview.HasError && (preview.ClassificationResult.Label is "Good" or "Bad" or "Duplicate" or "Closed Eye"))
                {
                    var destinationFolder = Path.Combine(outputFolderPath, preview.ClassificationResult.Label);
                    var destinationPath = Path.Combine(destinationFolder, fileName);
                    if (File.Exists(destinationPath))
                    {
                        // Handle filename conflicts
                        var baseName = Path.GetFileNameWithoutExtension(fileName);
                        var extensionWithDot = Path.GetExtension(fileName);
                        destinationPath = Path.Combine(destinationFolder, $"{baseName}_{DateTime.Now.Ticks}{extensionWithDot}");
                    }

                    bool moved = false;
                    for (int attempt = 0; attempt < 3 && !moved; attempt++)
                    {
                        try
                        {
                            File.Move(filePath, destinationPath);
                            moved = true;
                        }
                        catch (IOException ex) when (ex.Message.Contains("being used by another process"))
                        {
                            if (attempt < 2)
                            {
                                await Task.Delay(1000); // Wait 1 second before retry
                            }
                            else
                            {
                                preview.HasError = true;
                                preview.ErrorMessage = $"Failed to move file: {ex.Message}";
                            }
                        }
                    }
                }
                else if (preview.ClassificationResult.Label == "Duplicate")
                {
                    // Skip moving Duplicate images
                    preview.ErrorMessage = "Duplicate image not moved.";
                }
            }
            catch (Exception ex)
            {
                preview.HasError = true;
                preview.ErrorMessage = ex.Message;
                preview.ClassificationResult = new ClassificationResult
                {
                    Label = "Error",
                    Details = JsonSerializer.SerializeToElement(ex.Message)
                };
            }
            finally
            {
                preview.IsProcessing = false;
                processedCount++;
                StateHasChanged();
            }
        }
    }

    private void SelectPreview(int index)
    {
        selectedIndex = index;
        StateHasChanged();
    }

    private void ClearError()
    {
        errorMessage = "";
        StateHasChanged();
    }

    private void DismissNotification()
    {
        showNotification = false; // Hide notification when dismissed
        StateHasChanged();
    }

    private string GetSummaryClass(string label)
    {
        return label.ToLower() switch
        {
            "good" => "good",
            "bad" => "bad",
            "duplicate" => "duplicate",
            "closed eye" => "closed-eye", // Added for styling if needed
            _ => ""
        };
    }

    private string GetBadgeClass(string label)
    {
        return label.ToLower() switch
        {
            "good" => "badge-good",
            "bad" => "badge-bad",
            "duplicate" => "badge-duplicate",
            "closed eye" => "badge-closed-eye", // Added for styling if needed
            _ => "badge-default"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}