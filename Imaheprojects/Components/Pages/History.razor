@page "/history"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<History> Logger

<div class="history-page-wrapper">
    <div class="history-page-container">
        <div class="history-header">
            <h1>Processing History</h1>
            <button class="btn btn-danger" @onclick="ClearHistory" disabled="@isLoading">
                <span class="oi oi-trash" aria-hidden="true"></span> Clear All History
            </button>
        </div>

        <div class="history-content-panel">
            <div class="filter-controls">
                <span class="filter-label">Filter by:</span>
                <div class="btn-group" role="group">
                    @foreach (var filter in classificationFilters)
                    {
                        <button class="btn btn-outline-primary @(currentFilter == filter ? "active" : "")" @onclick="() => ApplyFilter(filter)">
                            @filter
                        </button>
                    }
                </div>
            </div>

            <div class="history-scroll-container">
                @if (isLoading)
                {
                    <div class="loading-indicator">
                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"></div>
                        <span class="loading-text">Loading History...</span>
                    </div>
                }
                else if (filteredAndGroupedHistory == null || !filteredAndGroupedHistory.Any())
                {
                    <div class="no-history-placeholder">
                        <span class="placeholder-icon">📜</span>
                        <div class="placeholder-text">@GetNoHistoryMessage()</div>
                        @if (currentFilter == "All")
                        {
                            <p>Process some images on the 'Sort' page to see them here.</p>
                        }
                    </div>
                }
                else
                {
                    @foreach (var sessionGroup in filteredAndGroupedHistory)
                    {
                        var isExpanded = groupToggleState.GetValueOrDefault(sessionGroup.Key, true);
                        <div class="history-group" @key="sessionGroup.Key">
                            <div class="history-group-header" @onclick="() => ToggleGroup(sessionGroup.Key)">
                                <div class="header-title">
                                    <span class="oi @(isExpanded ? "oi-caret-bottom" : "oi-caret-right")" aria-hidden="true"></span>
                                    <h5 class="mb-0 ms-2">@GetGroupHeaderText(sessionGroup)</h5>
                                    <span class="badge bg-secondary ms-3">@sessionGroup.Count()</span>
                                </div>
                                <button class="btn btn-sm btn-outline-secondary toggle-btn" @onclick="() => ToggleGroup(sessionGroup.Key)" @onclick:stopPropagation="true">
                                    @(isExpanded ? "Minimize" : "Expand")
                                </button>
                            </div>
                            <div class="history-group-content @(isExpanded ? "expanded" : "")">
                                <div class="history-grid">
                                    @foreach (var entry in sessionGroup)
                                    {
                                        <div class="history-card">
                                            <div class="history-card-image-wrapper">
                                                <!-- === FIX #1: The URL now correctly uses http://localhost:8000/... === -->
                                                <img src="@($"http://localhost:8000/history/image?path={Uri.EscapeDataString(entry.Path)}")"
                                                     alt="@entry.FileName" class="history-card-img" @onerror="() => entry.ImageHasError = true" />
                                                @if (entry.ImageHasError)
                                                {
                                                    <div class="image-error-overlay"><span>Image Not Found</span></div>
                                                }
                                            </div>
                                            <div class="history-card-body">
                                                <div class="history-card-filename" title="@entry.FileName">@entry.FileName</div>
                                                <div class="badge @GetBadgeClass(entry.Label)">@entry.Label</div>
                                                <div class="history-card-timestamp">@FormatTimestamp(entry.Timestamp)</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<style>
    /* === FIX #2: Removed the broken background image URL === */
    .history-page-wrapper {
        position: relative;
        height: calc(100vh - 70px);
        padding: 2rem;
        /* background-image: url('/images/your-background-image.jpg'); /* This line was removed */
        background-color: #343a40; /* A dark gray fallback background */
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        display: flex;
        flex-direction: column;
    }

        .history-page-wrapper::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1;
        }

    .history-page-container {
        position: relative;
        z-index: 2;
        max-width: 1400px;
        margin: auto;
        width: 100%;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .history-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-shrink: 0;
    }

        .history-header h1 {
            color: #ffffff;
            font-weight: 600;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.4);
        }

    .history-content-panel {
        background-color: rgba(255, 255, 255, 0.95);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.3);
        flex-grow: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .filter-controls {
        padding: 1.5rem 1.5rem 0 1.5rem;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 1.5rem;
    }

    .filter-label {
        font-weight: 600;
        color: #495057;
    }

    .history-scroll-container {
        overflow-y: auto;
        padding: 1.5rem;
        height: 100%;
    }

    .history-group {
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .history-group-header {
        padding: 0.75rem 1.25rem;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #e9ecef;
        border-bottom: 1px solid #ddd;
        border-radius: 8px 8px 0 0;
    }

        .history-group-header .header-title {
            display: flex;
            align-items: center;
            font-weight: 600;
            color: #343a40;
        }

    .toggle-btn {
        width: 80px;
    }

    .history-group-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
        background-color: white;
    }

        .history-group-content.expanded {
            max-height: 5000px;
            transition: max-height 0.5s ease-in;
        }

    .history-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1.5rem;
        padding: 1.5rem;
    }

    .loading-indicator, .no-history-placeholder {
        text-align: center;
        padding: 4rem 1rem;
        color: #6c757d;
        margin: auto;
    }

    .placeholder-icon {
        font-size: 4.5rem;
        color: #0d6efd;
    }

    .placeholder-text {
        font-size: 1.75rem;
        font-weight: 500;
        margin-top: 1rem;
        color: #343a40;
    }

    .history-card {
        background-color: #fff;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .history-card-image-wrapper {
        position: relative;
        width: 100%;
        height: 180px;
        background-color: #e9ecef;
    }

    .history-card-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-error-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(220, 53, 69, 0.8);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .history-card-body {
        padding: 1rem;
    }

    .history-card-filename {
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 0.5rem;
        color: #212529;
    }

    .history-card-timestamp {
        font-size: 0.8rem;
        color: #6c757d;
        margin-top: 0.5rem;
    }

    .btn-group .btn.active {
        background-color: #0d6efd;
        color: white;
        font-weight: 600;
    }

    .badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 700;
        color: white;
        display: inline-block;
    }

    .badge-good {
        background-color: #198754;
    }

    .badge-bad, .badge-blurred {
        background-color: #dc3545;
    }

    .badge-focused {
        background-color: #0dcaf0;
    }

    .badge-closed-eye {
        background-color: #fd7e14;
    }

    .badge-duplicate {
        background-color: #6c757d;
    }
</style>

@code {
    private List<HistoryEntry>? allHistoryEntries;
    private IEnumerable<IGrouping<string, HistoryEntry>>? filteredAndGroupedHistory;
    private Dictionary<string, bool> groupToggleState = new();

    private bool isLoading = true;
    private string currentFilter = "All";
    private readonly string[] classificationFilters = { "All", "Good", "Focused", "Blurred", "Closed Eye", "Bad", "Duplicate" };

    protected override async Task OnInitializedAsync() => await LoadAndProcessHistory();

    private async Task LoadAndProcessHistory()
    {
        isLoading = true;
        try
        {
            allHistoryEntries = await Http.GetFromJsonAsync<List<HistoryEntry>>("http://localhost:8000/history");
            ApplyFilterAndGrouping();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load history from backend.");
            allHistoryEntries = new List<HistoryEntry>();
            filteredAndGroupedHistory = null;
        }
        finally { isLoading = false; }
    }

    private void ApplyFilter(string newFilter)
    {
        currentFilter = newFilter;
        ApplyFilterAndGrouping();
    }

    private void ApplyFilterAndGrouping()
    {
        if (allHistoryEntries == null) return;

        var filteredEntries = (currentFilter == "All")
            ? allHistoryEntries
            : allHistoryEntries.Where(e => e.Label.Equals(currentFilter, StringComparison.OrdinalIgnoreCase));

        filteredAndGroupedHistory = filteredEntries
            .GroupBy(e => e.SessionId)
            .OrderByDescending(g => DateTime.Parse(g.First().Timestamp));

        foreach (var group in filteredAndGroupedHistory)
        {
            if (!groupToggleState.ContainsKey(group.Key))
            {
                groupToggleState[group.Key] = true;
            }
        }
    }

    private void ToggleGroup(string sessionId)
    {
        if (groupToggleState.ContainsKey(sessionId))
        {
            groupToggleState[sessionId] = !groupToggleState[sessionId];
        }
    }

    private async Task ClearHistory()
    {
        isLoading = true;
        await Http.DeleteAsync("http://localhost:8000/history");
        groupToggleState.Clear();
        await LoadAndProcessHistory();
    }

    private string GetGroupHeaderText(IGrouping<string, HistoryEntry> group)
    {
        if (!group.Any()) return "Empty Session";

        var minTimestamp = group.Min(e => DateTime.Parse(e.Timestamp));
        var maxTimestamp = group.Max(e => DateTime.Parse(e.Timestamp));

        string datePart = minTimestamp.ToString("MMMM d, yyyy");
        string timePart;

        if ((maxTimestamp - minTimestamp).TotalMinutes < 1)
        {
            timePart = minTimestamp.ToString("h:mm tt");
        }
        else
        {
            timePart = $"{minTimestamp:h:mm tt} - {maxTimestamp:h:mm tt}";
        }

        return $"{datePart} ({timePart})";
    }

    private string GetNoHistoryMessage() => (currentFilter == "All") ? "No History Found" : $"No '{currentFilter}' images found in history.";
    private string GetBadgeClass(string? label) => $"badge-{label?.ToLower().Replace(" ", "-") ?? "default"}";
    private string FormatTimestamp(string ts) => DateTime.TryParse(ts, out var dt) ? dt.ToString("h:mm:ss tt") : "";

    public class HistoryEntry
    {
        [JsonPropertyName("id")] public int Id { get; set; }
        [JsonPropertyName("session_id")] public string SessionId { get; set; } = "";
        [JsonPropertyName("filename")] public string FileName { get; set; } = "";
        [JsonPropertyName("label")] public string Label { get; set; } = "";
        [JsonPropertyName("timestamp")] public string Timestamp { get; set; } = "";
        [JsonPropertyName("details_message")] public string? DetailsMessage { get; set; }
        [JsonPropertyName("path")] public string Path { get; set; } = "";
        public bool ImageHasError { get; set; }
    }
}